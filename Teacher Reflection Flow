<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Teacher Reflection Flow: CBE & Learning Outcomes</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #fcfcfc; /* Soft Off-White Background */
        }
        .reflection-card {
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            transition: all 0.4s ease-out;
            border-left: 8px solid #06b6d4; /* Cyan 500 accent border */
            scroll-margin-top: 20px;
        }
        .reflection-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 15px 20px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.05);
        }
        .reflection-card.completed {
            border-left-color: #4ade80; /* Vibrant Green 400 for completed cards */
        }
        .rating-button {
            transition: transform 0.15s ease-out, background-color 0.15s, box-shadow 0.15s;
            transform: scale(0.95);
        }
        .rating-button:hover {
            transform: scale(1.05);
            box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        }
        .rating-button.selected {
            background-color: #4ade80; /* Vibrant Green 400 for selected */
            color: white;
            border-color: #22c55e;
            transform: scale(1.05);
        }
        .task-box {
            background-color: #f0fdf4; /* Lightest Mint Green background */
            border: 1px solid #dcfce7;
        }
        /* Styling for the animated feedback area */
        .feedback-area {
            opacity: 0;
            max-height: 0;
            overflow: hidden;
            transition: opacity 0.5s ease-out, max-height 0.7s ease-out, padding 0.5s;
            padding: 0 1rem;
            background-color: #f5f3ff; /* Light Violet/Purple 50 background */
            border-radius: 0.5rem;
            margin-top: 1rem;
        }
        .feedback-area.visible {
            opacity: 1;
            max-height: 500px;
            padding: 1rem;
        }
        /* Custom styling for a vibrant reflection container */
        .reflection-container {
            max-width: 900px;
            margin: 0 auto;
            padding: 2rem 1rem;
        }
    </style>
</head>
<body>

    <div id="app" class="reflection-container">

        <!-- Header -->
        <header class="text-center mb-10 p-4 bg-white rounded-xl shadow-lg border-b-4 border-cyan-500">
            <h1 class="text-3xl font-bold text-gray-800 mb-1">Interactive Reflection Flow</h1>
            <p class="text-md text-cyan-600 font-semibold">
                Lesson Competency: Understanding Curricular Goals, CBE, and Learning Outcomes
            </p>
        </header>
        
        <!-- Progress Bar (New Feature) -->
        <div class="mb-8 p-4 bg-white rounded-xl shadow-md border border-gray-100">
            <h3 class="text-sm font-semibold text-gray-700 mb-2">Your Progress</h3>
            <div class="w-full bg-gray-200 rounded-full h-2.5">
                <div id="progress-bar" class="bg-cyan-500 h-2.5 rounded-full transition-all duration-500 ease-out" style="width: 0%"></div>
            </div>
            <p id="progress-text" class="text-xs text-gray-500 mt-1 text-right">0 of 5 reflections complete</p>
        </div>

        <!-- Intro (Warm-up) -->
        <div class="mb-10 p-6 bg-amber-50 rounded-xl border border-amber-200">
            <h2 class="text-xl font-bold text-amber-700 mb-3">üëã Warm-up Reflection</h2>
            <p class="text-gray-700 leading-relaxed">
                Hi! Before we dive into competency-based education, let‚Äôs take a moment to reflect on your classroom practices. There are no right or wrong answers ‚Äî this is just a space to think about what you already do and explore small ways to strengthen your teaching. Let's get started!
            </p>
        </div>

        <!-- Reflection Sections will be injected here -->
        <div id="reflections-list" class="space-y-8">
            <!-- Content generated by JS -->
        </div>

        <!-- Wrap-Up Summary (Initially hidden) -->
        <div id="wrap-up-summary" class="hidden mt-12 p-8 bg-emerald-100 rounded-xl border-t-8 border-emerald-500 shadow-xl">
            <h2 class="text-2xl font-bold text-emerald-800 mb-4 flex items-center">
                <span class="mr-2 text-3xl">üåº</span> Your Reflection Summary
            </h2>
            <p id="summary-text" class="text-gray-700 leading-relaxed text-lg">
                <!-- Summary text injected here -->
            </p>
            <p class="mt-4 text-sm text-emerald-600 font-medium">
                Keep reflecting and trying these small steps ‚Äî they help make learning meaningful for your students!
            </p>
        </div>

    </div>

    <script>
        const REFLECTIONS = [
            {
                id: 1,
                title: "Student Engagement",
                prompt: "Imagine a regular day in your class. How often are your students actively engaged ‚Äî asking questions, explaining answers, or applying ideas to real life?",
                followUps: {
                    "1_2": "It‚Äôs great that you‚Äôre noticing this. What could make students feel more confident to ask or share ‚Äî maybe a short group discussion or a simple **‚ÄòThink-Pair-Share‚Äô**?",
                    "3": "You‚Äôre already creating space for student voice ‚Äî a good start. What type of questions or activities seem to get them most engaged?",
                    "4_5": "Wonderful! Encouraging students to ask questions and explain their thinking is at the heart of competency-based learning. Can you think of one more small way to expand this habit?",
                },
                task: "üå± **Try this in your next class:** Give students one chance to explain a concept in their own words. After class, jot down what worked well and what you might improve for next time.",
            },
            {
                id: 2,
                title: "Focus on Application",
                prompt: "When teaching a topic ‚Äî for example, ‚ÄúShapes‚Äù or ‚ÄúPlants‚Äù ‚Äî how often do you check if students can **apply** what they learn, not just recall it?",
                followUps: {
                    "1_2": "That‚Äôs honest ‚Äî application often takes extra planning. What is one simple way you could let students practice what they‚Äôve learned?",
                    "3": "Good! You sometimes include application. Could you think of one small activity where students apply their knowledge next week?",
                    "4_5": "Excellent! You focus on application ‚Äî this helps build real understanding. What‚Äôs one additional real-life connection you could try?",
                },
                task: "üå± **Design one short activity or question** where students apply a concept. Examples: measure something in the classroom, sort items, or explain a plant part in their own words.",
            },
            {
                id: 3,
                title: "Using Student Responses",
                prompt: "After students complete an activity or share answers, how often do you use their responses to **adjust your next lesson**?",
                followUps: {
                    "1_2": "It‚Äôs okay! Even noticing patterns in responses is a start. What could help you capture key insights next time?",
                    "3": "Good! You sometimes use feedback. Could you note one key observation after each lesson to guide the next one?",
                    "4_5": "Fantastic! You are responsive to student learning. How could you take this further ‚Äî maybe by planning a small follow-up activity?",
                },
                task: "üå± **After your next lesson, write one sentence** on what you will adjust based on student responses. Keep it short ‚Äî just one clear insight.",
            },
            {
                id: 4,
                title: "Connecting to Learning Outcomes",
                prompt: "How often do you clearly define what **success looks like** for your students *before* planning a lesson?",
                followUps: {
                    "1_2": "Many teachers start this way. Try picking one clear outcome for your next lesson ‚Äî it helps focus planning.",
                    "3": "Good! You sometimes define outcomes. Could you break it down into 1‚Äì2 small skills or knowledge points?",
                    "4_5": "Great! Clear learning outcomes guide every activity. How could you link an activity directly to the outcome next time?",
                },
                task: "üå± **Take the learning outcome for your next lesson** and break it into 1‚Äì2 small skills or knowledge points. Plan one activity for each.",
            },
            {
                id: 5,
                title: "Thematic Planning",
                prompt: "If you were teaching a topic like ‚ÄúWater‚Äù or ‚ÄúSeasons,‚Äù how often do you select a theme that makes lessons **meaningful and relatable**?",
                followUps: {
                    "1_2": "No worries! Themes can make lessons engaging. Think of one simple theme from students‚Äô daily life for the next topic.",
                    "3": "Good start. Could you list 2 ways to connect lessons or activities to a chosen theme?",
                    "4_5": "Excellent! Themes help students see connections. How could you make the theme even more relevant to their local context?",
                },
                task: "üå± **Choose a theme for your next topic** and list two simple ways to connect lessons or activities to it. Use local examples if possible.",
            },
        ];

        const results = {};
        const reflectionsList = document.getElementById('reflections-list');
        const summaryDiv = document.getElementById('wrap-up-summary');
        const summaryText = document.getElementById('summary-text');
        const progressBar = document.getElementById('progress-bar');
        const progressText = document.getElementById('progress-text');

        // Function to render the reflection items
        function renderReflections() {
            reflectionsList.innerHTML = REFLECTIONS.map(r => `
                <div id="reflection-${r.id}" class="reflection-card bg-white p-6 rounded-xl">
                    <h3 class="text-xl font-semibold text-gray-800 mb-2">Reflection ${r.id}: ${r.title}</h3>
                    <p class="text-gray-600 mb-4">${r.prompt} <span class="font-bold">(1 = Never, 5 = Always)</span></p>

                    <div class="flex space-x-2 mb-4 justify-center sm:justify-start">
                        ${[1, 2, 3, 4, 5].map(rating => `
                            <button
                                data-id="${r.id}"
                                data-rating="${rating}"
                                onclick="handleRatingClick(this)"
                                class="rating-button w-10 h-10 rounded-full border-2 border-teal-400 text-teal-600 font-bold bg-teal-50 hover:bg-teal-100 focus:outline-none focus:ring-4 focus:ring-teal-300"
                            >
                                ${rating}
                            </button>
                        `).join('')}
                    </div>

                    <!-- Adaptive Feedback Area (Uses 'feedback-area' class for animation) -->
                    <div id="feedback-${r.id}" class="feedback-area">
                        <p class="text-violet-700 italic mb-3" id="follow-up-${r.id}"></p>
                        <div class="task-box p-3 rounded-lg text-sm text-green-800 font-medium" id="task-${r.id}"></div>
                    </div>
                </div>
            `).join('');
        }
        
        // Function to update the progress bar
        function updateProgress() {
            const completedCount = Object.keys(results).length;
            const totalCount = REFLECTIONS.length;
            const percentage = (completedCount / totalCount) * 100;

            progressBar.style.width = `${percentage}%`;
            progressText.textContent = `${completedCount} of ${totalCount} reflections complete`;
        }


        // Function to handle rating click
        function handleRatingClick(button) {
            const id = parseInt(button.getAttribute('data-id'));
            const rating = parseInt(button.getAttribute('data-rating'));
            const reflection = REFLECTIONS.find(r => r.id === id);

            if (!reflection) return;

            // 1. Update the results store and progress
            const isNewOrChangedRating = results[id] !== rating;
            results[id] = rating;
            
            if (isNewOrChangedRating) {
                updateProgress(); // Update progress only on a new or changed rating
            }

            // 2. Clear previous selections and highlight the current button
            const container = button.closest('.reflection-card');
            container.querySelectorAll('.rating-button').forEach(btn => {
                // Remove selected classes
                btn.classList.remove('selected', 'bg-emerald-500', 'text-white');
                // Add unselected Teal classes
                btn.classList.add('bg-teal-50', 'text-teal-600');
            });
            // Add selected Green classes
            button.classList.add('selected', 'bg-emerald-500', 'text-white');
            // Remove unselected classes
            button.classList.remove('bg-teal-50', 'text-teal-600');
            
            // Mark card as completed and update its border color (handled by CSS .completed class)
            container.classList.add('completed');


            // 3. Determine the correct follow-up key
            let followUpKey;
            if (rating === 1 || rating === 2) {
                followUpKey = "1_2";
            } else if (rating === 3) {
                followUpKey = "3";
            } else { // 4 or 5
                followUpKey = "4_5";
            }

            // 4. Inject feedback and task
            const followUpElement = document.getElementById(`follow-up-${id}`);
            const taskElement = document.getElementById(`task-${id}`);
            const feedbackDiv = document.getElementById(`feedback-${id}`);

            // Replace ** with <strong> for follow-up text
            followUpElement.innerHTML = reflection.followUps[followUpKey].replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>'); 
            taskElement.innerHTML = reflection.task.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');

            // 5. Show the feedback area with animation
            feedbackDiv.classList.add('visible');
            
            // 6. Check if all reflections are complete, otherwise scroll to next
            const completedCount = Object.keys(results).length;
            if (completedCount === REFLECTIONS.length) {
                showWrapUpSummary();
            } else {
                // Scroll to the next uncompleted reflection
                const nextId = id + 1;
                const nextReflection = document.getElementById(`reflection-${nextId}`);
                if (nextReflection) {
                    // Slight delay to allow feedback animation to start before scrolling
                    setTimeout(() => {
                        nextReflection.scrollIntoView({ behavior: 'smooth', block: 'center' });
                    }, 500);
                }
            }
        }

        // Function to show the final summary with animation
        function showWrapUpSummary() {
            // Calculate average rating
            const totalScore = Object.values(results).reduce((sum, score) => sum + score, 0);
            const averageScore = totalScore / REFLECTIONS.length;
            let personalizedComment = "";

            if (averageScore <= 2.5) {
                personalizedComment = "You've identified several areas for growth, which is a fantastic first step! Focusing on one small action, like the 'Think-Pair-Share' technique or defining one clear learning outcome, will lead to meaningful change.";
            } else if (averageScore < 4) {
                personalizedComment = "Your reflection shows a solid foundation! You've already incorporated several effective practices. Keep building on this by consistently using student feedback to adjust your next lesson and looking for more real-life application examples.";
            } else {
                personalizedComment = "Excellent work! Your responses highlight a strong alignment with competency-based habits‚Äîengaging learners, checking understanding, and connecting lessons to clear outcomes. Focus on those 'one more small way' extension ideas to elevate your planning.";
            }

            // Define the core summary message with markdown
            const coreSummary = `Overall, you‚Äôve already shown several great competency-based habits related to **engaging learners**, checking **application**, adjusting based on **feedback**, and connecting lessons to clear **outcomes** and **themes**. Small actions, like adding one application activity or using a local theme, will make your planning even stronger.`;

            // Combine personalized comment and core summary, applying markdown conversion to the core summary
            const fullSummaryHTML = `
                ${personalizedComment}<br><br>
                ${coreSummary.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')}
            `;

            summaryText.innerHTML = fullSummaryHTML;
            
            // Animate the summary box reveal
            summaryDiv.style.opacity = '0';
            summaryDiv.classList.remove('hidden');
            setTimeout(() => {
                summaryDiv.style.transition = 'opacity 1s ease-in';
                summaryDiv.style.opacity = '1';
                // Scroll to the summary
                summaryDiv.scrollIntoView({ behavior: 'smooth', block: 'start' });
            }, 100);
        }

        // Initialize the flow on load
        window.onload = renderReflections;
    </script>
</body>
</html>
